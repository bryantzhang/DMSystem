package model;

import java.util.List;

import model.UserUtil;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;

/**
 * HibernateUtil generated by Justin Yang
 */
public class HibernateUtil {
	
	private static final Log log = LogFactory.getLog(UserUtil.class);
	private static final SessionFactory sessionFactory = buildSessionFactory();

	private static SessionFactory buildSessionFactory() {
		try {
			// Create the SessionFactory from hibernate.cfg.xml
			Configuration configuration = new Configuration();
			configuration.configure();
			ServiceRegistry serviceRegistry = new ServiceRegistryBuilder()
					.applySettings(configuration.getProperties())
					.buildServiceRegistry();
			return configuration.buildSessionFactory(serviceRegistry);
		} catch (Throwable ex) {
			// Make sure you log the exception, as it might be swallowed
			System.err.println("Initial SessionFactory creation failed." + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public static void shutdown() {
		// Close caches and connection pools
		getSessionFactory().close();
	}

	public static void persist(Object transientInstance) throws Exception {
		log.debug("persisting instance");
		Session session = HibernateUtil.getSessionFactory().openSession();
	    try {
	        session.beginTransaction();
	        session.save(transientInstance);
	        session.getTransaction().commit();
			log.debug("persist successful");
	    } catch (HibernateException he) {
	        session.getTransaction().rollback();
			log.error("persist failed", he);
			throw he;
	    } finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}
	
	@SuppressWarnings("rawtypes")
	public static void persist(List transientInstances) throws Exception {
		log.debug("persisting list of instances");
		Session session = HibernateUtil.getSessionFactory().openSession();
	    try {
	        session.beginTransaction();
	        
	        for (Object transientInstance : transientInstances) {
		        session.save(transientInstance);
	        }
	        session.getTransaction().commit();
			log.debug("persist successful");
	    } catch (HibernateException he) {
	        session.getTransaction().rollback();
			log.error("persist failed", he);
			throw he;
	    } finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}

	public static void remove(Object persistentInstance) throws Exception {
		log.debug("removing instance");
		Session session = HibernateUtil.getSessionFactory().openSession();
		try {
	        session.beginTransaction();
	        session.delete(persistentInstance);
	        session.getTransaction().commit();
			log.debug("remove successful");
		} catch (RuntimeException re) {
			log.error("remove failed", re);
			throw re;
		} finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}

	public static void update(Object detachedInstance) throws Exception {
		log.debug("merging instance");
		Session session = HibernateUtil.getSessionFactory().openSession();
		try {
	        session.beginTransaction();
	        session.update(detachedInstance);
	        session.getTransaction().commit();
			log.debug("merge successful");
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		} finally {
			session.close();
		}
	}

	@SuppressWarnings("rawtypes")
	public static Object findById(Class objectClass, int id) throws Exception {
		log.debug("getting instance with id: " + id);
		Session session = HibernateUtil.getSessionFactory().openSession();
		try {
	        session.beginTransaction();
			Object instance = session.get(objectClass, id);
			log.debug("get successful");
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		} finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}

    public static Object initialize(Object proxy) {
        log.debug("initializing instance");
        Session session = HibernateUtil.getSessionFactory().openSession();
        try {
            session.beginTransaction();
            if (Hibernate.isInitialized(proxy)) {
                Hibernate.initialize(proxy);
            }
            log.debug("initialize successful");
        } catch (RuntimeException re) {
            log.error("initialize failed", re);
            throw re;
        } finally {
            if (session != null) {
                session.close();
            }
        }
        return proxy;
    }
	
	@SuppressWarnings("rawtypes")
	public static List getAll(Class objectClass) throws Exception {
		log.debug("getting all instance");
		Session session = HibernateUtil.getSessionFactory().openSession();
		try {
	        session.beginTransaction();
			List instance = session.createCriteria(objectClass).list();
			log.debug("get successful");
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		} finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}
}